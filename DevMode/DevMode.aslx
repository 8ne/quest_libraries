<?xml version="1.0"?>
<library>

<!--

  ****************************************************************************************************
  DevMode - Tool for better testing the game
  by SoonGames, 2018
  Version 1.25
  ****************************************************************************************************
  Quest-Version: 5.7
  ****************************************************************************************************
  If you are viewing this on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  ****************************************************************************************************
  Download the DevMode.aslx, integrate it as Library in Quest.
  ****************************************************************************************************
  Tool for better testing the game.
  Inspired by Pixie's Cheating-Code. ;-)
  ****************************************************************************************************

  ****************************************************************************************************
  Version 1.25
  Editable debug table added.
  The code to be executed in DevMode slightly changed.
  It is now closer to JSON. Comma separators are now used instead of semicolons.
  The code language was named FlyScript (referring to the name 'on the fly').
  The commands are now only available in English. This is more uniform in the overall context.
  ****************************************************************************************************
  Version 1.21
  Added Messages on success.
  Added Togglecommand.
  languages integrated again. Compatible with Quest 5.7 and higher.
  ****************************************************************************************************
  Version 1.16
  Function independent of the integrated DevMode, for further development.
  Error fixed when DevMode is switched off.
  ****************************************************************************************************
  Version 1.1
  The DevMode was integrated in Quest 5.8.
  Language templates have been moved to Quest's language files.
  ****************************************************************************************************

  ****************************************************************************************************
  DevMode-Object-Commands
  ****************************************************************************************************
  Unlike the commands in the game, they are executed directly and without detours via intercept scripts.
  ****************************************************************************************************
  #take object
  #drop object
  #put object1 in object2
  #open object
  #close object
  #on object
  #off object
  #to player
  #go room
  ****************************************************************************************************
  DevMode-Single-Commands
  ****************************************************************************************************
  #clr (clear screen)
  #? (help)
  # (close game)
  ****************************************************************************************************
  DevMode-Object-Attributes
  ****************************************************************************************************
  #object1.attribute=object2.attribute (attribute assignment of another object)
  #object.attribute=true/false (boolean)
  #?object.attribute (set true)
  #!object.attribute (set false)
  #~object.attribute (toggle)
  #object.attribute="value" (string)
  #object.attribute=15 (integer)
  #object.attribute=25.55 (double)
  #object.attribute=[item1,item2,item3] (list)
  #object.attribute[]=element (add element to list)
  #object.attribute=[] (create new list)
  #object.attribute={key1:item1,key2:item2,key3:item3} (dictionary)
  #object.attribute{key}=element (add or overwrite element to dictionary)
  #object.attribute={} (create new dictionary)
  #object.attribute (read attribute)
  ****************************************************************************************************
  DevMode-Readonly
  ****************************************************************************************************
  <script> (These are scripts that cannot be changed, but can only be read)
  ****************************************************************************************************

-->
  
  <!-- Include debug table -->
  <javascript src="DevMode/tabulator.min.js" />
  <javascript src="DevMode/debugtable.js" />

  <!-- Languages -->
  <!-- English -->
  <template name="DevModeErrorWrongFormat">That's the wrong format.</template>
  <template name="DevModeErrorObjectNotRecognised">The object was not found.</template>
  <template name="DevModeErrorWrongTyp">That's the wrong type.</template>
  <template name="DevModeErrorWrongKey">The key was not found.</template>
  <dynamictemplate name="DevModeErrorCantFindObject">"The object with the name '" + text + "' cannot be found."</dynamictemplate>
  <dynamictemplate name="DevModeErrorCantFindAttribute">"The attribute with the name '" + text + "' cannot be found."</dynamictemplate>
  <template name="DevModeExecuteCommand">The command was executed.</template>
  <template name="DevModeNotActive">DevMode is not active!</template>
  <template name="DevModeDescriptionCommands"><![CDATA[<b>Commands</b><br/>#take object<br/>#drop object<br/>#put object1 in object2<br/>#open object<br/>#close object<br/>#on object<br/>#off object<br/>#to player<br/>#go room<br/><br/><i>Unlike the commands in the game, they are executed directly and without detours via intercept scripts.</i><br/><br/><b>Assignments (Oriented to JSON)</b><br/>#object1.attribute=object2.attribute (attribute assignment of another object)<br/>#object.attribute=true/false (boolean)<br/>#?object.attribute (set true)<br/>#!object.attribute (set false)<br/>#~object.attribute (toggle)<br/>#object.attribute="value" (string)<br/>#object.attribute=15 (integer)<br/>#object.attribute=25.55 (double)<br/>#object.attribute=[item1,item2,item3] (list)<br/>#object.attribute[]=element (add element to list)<br/>#object.attribute=[] (create new list)<br/>#object.attribute={key1:item1,key2:item2,key3:item3} (dictionary)<br/>#object.attribute{key}=element (add or overwrite element to dictionary)<br/>#object.attribute={} (create new dictionary)<br/>#object.attribute (read attribute)<br/><br/><b>Extras</b><br/>#clr (clear screen)<br/>#? (help)<br/># (close game)]]></template>
  <template name="DevModeActive"><![CDATA[<b>DevMode: Active</b>]]></template>
  <template name="DevModeChangedPov">Player object changed to </template>
  <template name="DevModeChangedPovPos">Position of the player changed to </template>
  <template name="DevModeStartScript">Initialization script started.</template>
  <template name="DevModeSetVerbs">Verbs assigned.</template>
  <template name="DevModeComExecute">Command executed: </template>

  <template name="EditorObjectWearableAdjVerbs">Adapting the inventory verbs to the states</template>
  <template name="EditorGameEnableDevMode">Show DevMode options</template>
  <template name="EditorGameDevMode">DevMode</template>
  <template name="EditorGameDevModeInfoRelease">Important: Before releasing the game DevMode must be deactivated!</template>
  <template name="EditorGameDevModeInfoCommands">Enhanced commands are available in the current game. Enter '#?' to get more information.</template>
  <template name="EditorGameDevModeOptions">Options</template>
  <template name="EditorGameDevModeChangePov">Select another player</template>
  <template name="EditorGameDevModeChangePovPos">Select another starting location for the player</template>
  <template name="EditorGameDevModePov">Player</template>
  <template name="EditorGameDevModePlace">Location</template>
  <template name="EditorGameDevModeSetInitScript">Use an initialization script for DevMode</template>
  <template name="EditorGameDevModeInitScript">Initialization script for DevMode</template>
  <template name="EditorGameDevModeShowDebugTable">Show debugtable</template>
  <template name="EditorGameDevModeSetVerbs">Add DevMode verbs to the verb list of objects</template>
  <template name="EditorGameDevModeShowInfos">Display DevMode output</template>
  <template name="EditorGameDevModeOwnFontColour">Use your own font color for DevMode output</template>
  <template name="EditorGameDevModeFontColour">Font color for DevMode output</template>
  <template name="EditorGameDevModeOn">Active</template>
  <template name="EditorGameDevModeOff">Inactive</template>
  <template name="EditorGameDevModeAttributes">Attributes</template>
  <template name="EditorGameDevModeDescriptionAttribute"><![CDATA[Enter the object with the corresponding attribute in "Key" (e. g. game.showtitle or player.look). The assignment is entered in "Value". It is possible to create Strings ("Hello World!"), Boolean (true or false), Integer (15), Double (25.55), Listen (["Hello","World","!"]) and Dictionarys ({H:"Hello",W:"World"}.)]]></template>
    

  <!-- Zur Umstellung auf Deutsch folgende Zeilen einklammern -->
  <!-- Deutsch -->
  <!--
  <template name="DevModeErrorWrongFormat">Das ist leider das falsche Format.</template>
  <template name="DevModeErrorObjectNotRecognised">Das Objekt wurde nicht erkannt.</template>
  <template name="DevModeErrorWrongTyp">Das ist der falsche Typ.</template>
  <template name="DevModeErrorWrongKey">Der Key wurde nicht gefunden.</template>
  <dynamictemplate name="DevModeErrorCantFindObject">"Das Objekt mit dem Namen '" + text + "' kann nicht gefunden werden."</dynamictemplate>
  <dynamictemplate name="DevModeErrorCantFindAttribute">"Das Attribut mit dem Namen '" + text + "' kann nicht gefunden werden."</dynamictemplate>
  <template name="DevModeExecuteCommand">Der Befehl wurde ausgef√ºhrt.</template>
  <template name="DevModeNotActive">Der DevMode ist nicht aktiv!</template>
  <template name="DevModeDescriptionCommands"><![CDATA[<b>Kommandos</b><br/>#take object<br/>#drop object<br/>#put object1 in object2<br/>#open object<br/>#close object<br/>#on object<br/>#off object<br/>#to player<br/>#go room<br/><br/><br/><i>Im Gegensatz zu den Kommandos im Spiel werden sie direkt und ohne Umwege √ºber Abfangskripte ausgef√ºhrt.</i><br/><br/><b>Zuweisungen (Orientiert an JSON)</b><br/>#object1.attribut=object2.attribut (Attributzuweisung eines anderen Objektes)<br/>#object.attribut=true/false (Boolean)<br/>#?object.attribut (Setze auf True)<br/>#!object.attribut (Setze auf False)<br/>#~object.attribut (Toggeln)<br/>#object.attribut="value" (String)<br/>#object.attribut=15 (Integer)<br/>#object.attribut=25.55 (Double)<br/>#object.attribut=[Item1,Item2,Item3] (Liste)<br/>#object.attribut[]=element (Element zur Liste hinzuf√ºgen)<br/>#object.attribut=[] (Eine neue Liste erstellen)<br/>#object.attribut={Key1:Item1,Key2:Item2,Key3:Item3} (Dictionary)<br/>#object.attribut{Key}=element (Element zum Dictionary hinzuf√ºgen oder √ºberschreiben)<br/>#object.attribut={} (Neues Dictionary erstellen)<br/>#object.attribut (Attribute auslesen)<br/><br/><b>Extras</b><br/>#clr (Bildschirminhalt l√∂schen)<br/>#? (Hilfe)<br/># (Spiel schliessen)]]></template>
  <template name="DevModeActive"><![CDATA[<b>Entwicklermodus: Aktiviert</b>]]></template>
  <template name="DevModeChangedPov">Spielerobjekt ge√§ndert zu </template>
  <template name="DevModeChangedPovPos">Position des Spielers ge√§ndert zu </template>
  <template name="DevModeStartScript">Initialisierungsscript gestartet.</template>
  <template name="DevModeSetVerbs">Verben zugeordnet.</template>
  <template name="DevModeComExecute">Kommando ausgef√ºhrt: </template>

  <template name="EditorObjectWearableAdjVerbs">Die Inventarverben den Zust√§nden anpassen</template>
  <template name="EditorGameEnableDevMode">Entwicklermodus (Hinzuf√ºgen von erweiterten Befehlen zum Testen des Spiels)</template>
  <template name="EditorGameDevMode">Entwicklermodus</template>
  <template name="EditorGameDevModeInfoRelease">Wichtig: Vor Ver√∂ffentlichung des Spiels muss der Entwicklermodus deaktiviert werden!</template>  
  <template name="EditorGameDevModeInfoCommands">Es stehen im laufenden Spiel erweiterte Kommandos zur Verf√ºgung. Geben Sie '#?' ein um weitere Informationen zu erhalten.</template>
  <template name="EditorGameDevModeOptions">Optionen</template>
  <template name="EditorGameDevModeChangePov">Einen anderen Spieler w√§hlen</template>
  <template name="EditorGameDevModePov">Spieler</template>
  <template name="EditorGameDevModeChangePovPos">Eine andere Position des Spielers w√§hlen</template>
  <template name="EditorGameDevModePlace">Ort</template>
  <template name="EditorGameDevModeSetInitScript">Ein Initialisierungsscript f√ºr den Entwicklermodus verwenden</template>
  <template name="EditorGameDevModeInitScript">Initialisierungsscript f√ºr den Entwicklermodus</template>
  <template name="EditorGameDevModeShowDebugTable">Zeige debugtabelle</template>
  <template name="EditorGameDevModeSetVerbs">Verben des Entwicklungsmodus in die Verbliste der Objekte hinzuf√ºgen</template>
  <template name="EditorGameDevModeShowInfos">Ausgaben des Entwicklungsmodus anzeigen</template>  
  <template name="EditorGameDevModeOwnFontColour">Eigene Schriftfarbe f√ºr die Ausgabe des Entwicklermodus verwenden</template>
  <template name="EditorGameDevModeFontColour">Schriftfarbe f√ºr die Ausgaben des Entwicklermodus</template>
  <template name="EditorGameDevModeOn">Aktiviert</template>
  <template name="EditorGameDevModeOff">Deaktiviert</template>
  <template name="EditorGameDevModeAttributes">Attributes</template>
  <template name="EditorGameDevModeDescriptionAttribute"><![CDATA[In "Key" wird das Objekt mit dem zugeh√∂rigen Attribut eingetragen (z. B. game.showtitle oder player.look). In "Value" wird die Zuweisung eingetragen. Es ist m√∂glich Strings ("Hallo Welt!"), Boolean (true oder false), Integer (15), Double (25.55), Listen (["Hallo","Welt","!"]) und W√∂rterb√ºcher ({H:"Hallo",W:"Welt"} zu erstellen.)]]></template>
  -->

  <!-- Commands -->
  <command name="devmode_commands">
    <pattern type="string"></pattern>
    <pattern type="string"><![CDATA[^#(?<text>.*)]]></pattern>
    <script>
    <![CDATA[
      if (HasAttribute(game, "devmode_active")) {
        if (game.devmode_active) {
          if (IsDefined("text")) {
            regex = "^(?<command2>put) (?<object1>.+) (in|on) (?<object2>.+)$|^(?<command1>drop|take|to|go|open|close|on|off) (?<object>.+)$|^(?<command0>clr|\\?)$"
            if (IsRegexMatch (regex, text)) {
              result = populate (regex, text)
              com0 = ToString(DictionaryItem(result, "command0"))
              com1 = ToString(DictionaryItem(result, "command1"))
              com2 = ToString(DictionaryItem(result, "command2"))

              // Commands
              if (not com0 = "") { // without object
                switch (LCase(com0)) {
                  case ("clr") {
                    ClearScreen
                  }
                  case ("?") {
                    msgdm (Template("DevModeDescriptionCommands"))
                  }
                }
              }
              else if (not com1 = "") { // with one object
                objstr = ToString(DictionaryItem(result, "object"))
                obj = getObjectExt(objstr)
                if (obj = null) error (DynamicTemplate("DevModeErrorCantFindObject", objstr))
                switch (LCase(com1)) {
                  case ("drop") {
                    setWithoutChange (obj, "parent", game.pov.parent)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                  case ("take") {
                    setWithoutChange (obj, "parent", game.pov)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                  case ("to") {
                    setPov (obj)
                  }                
                  case ("go") {
                    setPovPos (obj)
                  }
                  case ("open") {
                    setWithoutChange (obj, "isopen", true)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                  case ("close") {
                    setWithoutChange (obj, "isopen", false)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                  case ("on") {
                    setWithoutChange (obj, "switchedon", true)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                  case ("off") {
                    setWithoutChange (obj, "switchedon", false)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                }
              }
              else if (not com2 = "") { // with two objects
                obj1str = ToString(DictionaryItem(result, "object1"))
                obj2str = ToString(DictionaryItem(result, "object2"))
                obj1 = getObjectExt(obj1str)
                obj2 = getObjectExt(obj2str)
                if (obj1 = null) error (DynamicTemplate("DevModeErrorCantFindObject", obj1str))
                if (obj2 = null) error (DynamicTemplate("DevModeErrorCantFindObject", obj2str))
                switch (LCase(ToString(DictionaryItem(result, "command2")))) {
                  case ("put") {
                    setWithoutChange (obj1, "parent", obj2)
                    msgdm (Template("DevModeComExecute") + text)
                  }
                }
              }
            }

            // Expressions
            else {
              ParseToQuestCode (Replace(text, "\"", "\\\""))
            }
          }
          else {
            request (Quit, "") // Exit game
          }
        }
        else {
          error (Template("DevModeNotActive")) // The DevMode is not activ
        }
      }
      else {
        error (Template("DevModeNotActive")) // The DevMode is not activ
      }
    ]]>
    </script>
  </command>

  <!-- Functions -->

  <function name="ParseToQuestCode" parameters="text">
    <![CDATA[

      // RegEx available in https://regex101.com/r/naVUu1/1
      regex = "^(?<booltoken>(?:\\?|\\!|\\~)?)(?<object>.+?)\\.(?<attribute>.+?)(?:(?<attitemtoken>\\[|\\{)(?<attributeitem>.*?)(?:\\]|\\}))?(?:\\s*?\\=\\s*?(?:(?<valitemtoken>(?:\\\"|\\[|\\{)?)(?<value>.*?)(?:\\\"|\\]|\\})?)(?(valitemtoken)|(?:(?<valobject>.+?)\\.(?<valattribute>.+?))))?$"
      
      // Start match
      if (IsRegexMatch (regex, text)) {
        result = populate (regex, text)
        Log (ToString(result))


        // Object
        if (result["object"] <> "") {
          object = getObjectExt(result["object"])
          if (object = null) error (DynamicTemplate("DevModeErrorCantFindObject"), result["object"])

          // Attribute
          if (result["attribute"] <> "")  {
            attribute = result["attribute"]
            current_value = GetAttribute(object, attribute)
            if (current_value = null) error (DynamicTemplate("DevModeErrorCantFindAttribute"), result["attribute"])
          }
        }


        // Booltoken
        if (result["booltoken"] = "?") bool = true
        else if (result["booltoken"] = "!") bool = false
        else if (result["booltoken"] = "~") {
          bool = not GetBoolean (obj, att)
          if (bool = null) error (Template("DevModeErrorWrongFormat"))
        }
        else {

          // Value

          // Value-String
          if (result["valitemtoken"] = "\"") {
            value = result["value"]
          }

          // Value-List
          else if (result["valitemtoken"] = "[") {
            value = NewList ()
            if (result["value"] <> "") value = Split(result["value"], ",")
          }

          // Value-Dictionary
          else if (valitemtoken = "{") {
            value = NewDictionary ()
            if (result["value"] <> "") {
              list = Split(result["value"], ",")
              foreach (lkey, list) {
                if (not Instr(lkey, ":") = 0) {
                  dict = Split(lkey, ":")
                  dict0 = ToString(dict[0])
                  dict1 = ToString(dict[1])
                  dictionary add (value, dict0, dict1)
                }
                else {
                  error (Template("DevModeErrorWrongFormat"))
                }
              }
            }
          }

          // Valobject
          else if (result["valobject"] <> "") {
            valobject = getObjectExt(result["valobject"])
            if (valobject = null) error (DynamicTemplate("DevModeErrorCantFindObject"), result["valobject"])

            // Valattribute
            if (result["valattribute"] <> "")  {
              valattribute = result["valattribute"]
              value = GetAttribute(valobject, valattribute)
              if (value = null) error (DynamicTemplate("DevModeErrorCantFindAttribute"), result["valattribute"])
            }
          }

          // Another
          else {
            value = Eval(result["value"])
          }
        }
      }
      // Unsuccessful match
      else {
        error (Template("DevModeErrorWrongFormat"))
      }


      // Attribute-List
      if (result["attitemtoken"] = "[") {
        curvaltypcheck = (IsDefined(current_value) and (TypeOf(current_value) = "list" or TypeOf(current_value) = "objectlist" or TypeOf(current_value) = "stringlist"))
        if (val = null) {
          if (not curvaltypcheck) error (Template("DevModeErrorWrongTyp"))
          else if (result["attributeitem"] = "") error (Template("DevModeErrorNoItem"))
          else if (not result["attributeitem"] in current_value) error (Template("DevModeErrorWrongKey"))
          else current_value = ListItem(current_value, attributeitem)
        }
        else {
          if (not curvaltypcheck) current_value = NewList ()
          if (result["attributeitem"] <> "") {
            if (attributeitem in current_value) list remove (current_value, attributeitem)
            list add (current_value, value)
            value = NewList ()
            value = current_value
          }
        }
      }


      // Attribute-Dictionary
      else if (result["attitemtoken"] = "{") {
        curvaltypcheck = (IsDefined(current_value) and (TypeOf(current_value) = "dictionary" or TypeOf(current_value) = "objectdictionary" or TypeOf(current_value) = "stringdictionary"))
        if (val = null) {
          if (not curvaltypcheck) error (Template("DevModeErrorWrongTyp"))
          else if (result["attributeitem"] = "") error (Template("DevModeErrorNoItem"))
          else if (not result["attributeitem"] in current_value) error (Template("DevModeErrorWrongKey"))
          else current_value = ListItem(current_value, attributeitem)
        }
        else {
          if (not curvaltypcheck) current_value = NewDictionary ()
          if (result["attributeitem"] <> "") {
            if (attributeitem in current_value) dictionary remove (current_value, attributeitem)
            dictionary add (current_value, value)
            value = NewDictionary ()
            value = current_value
          }
        }
      }
      

      // Set boolean
      if (bool <> null) {
        set (obj, att, bool)
        msgdm (object.name + "." + attribute + "=" + ToString(bool))
      }

      // Set value
      else if (val <> null) {
        set (obj, att, val)
        msgdm (Template("DevModeComExecute") + object.name + "." + attribute + "=" + ToString(value))
      }

      // Get value
      else {
        msgdm (object.name + "." + attribute + "=" + ToString(current_value))
      }

    ]]>
  </function>

  <function name="ParseToDevCode" parameters="text" type="string">
    <![CDATA[
      switch (TypeOf(text)) {
        case ("string") {
          parsetext = "\"" + text + "\""
        }
        case ("object") {
          parsetext = text.name
        }
        case ("script") {
          parsetext = "<" + Replace(ToString(text), "Script: ", "") + ">"
        }
        case ("stringlist") {
          arr = NewStringList()
          foreach (str, text) list add (arr, "\"" + str + "\"")
          parsetext = "[" + Join (arr, ",") + "]"
        }
        case ("objectlist") {
          arr = NewStringList()
          foreach (obj, text) list add (arr, obj.name)
          parsetext = "[" + Join (arr, ",") + "]"
        }
        case ("stringdictionary") {
          arr = NewStringList()
          foreach (key, text) list add (arr, key + ":\"" + StringDictionaryItem(text, key) + "\"")
          parsetext = "{" + Join (arr, ",") + "}"
        }
        case ("objectdictionary") {
          arr = NewStringList()
          foreach (key, text) {
            obj = ObjectDictionaryItem(text, key)
            list add (arr, key + ":" + obj.name)
          }
          parsetext = "{" + Join (arr, ",") + "}"
        }
        case ("scriptdictionary") {
          arr = NewStringList()
          foreach (key, text) {
            scr = ScriptDictionaryItem(text, key)
            list add (arr, key + ":" + "<" + Replace(ToString(scr), "Script: ", "") + ">")
          }
          parsetext = "{" + Join (arr, ",") + "}"
        }
        default {
          parsetext = ToString(text)
        }
      }
      return (parsetext)
    ]]>
  </function>

  <function name="msgdm" parameters="str">
    <![CDATA[
      if (game.devmode_showinfos) {
        if (game.devmode_ownfontcolour) col = " color=\"" + game.devmode_fontcolour + "\""
        else col = ""
        msg ("<font" + col + ">" + str + "</font>")
      }
    ]]>
  </function>

  <function name="setWithoutChange" parameters="obj, att, val">
    cha = "changed" + att
    bla => { }
    scr => { }
    if (obj = null) error (Template("DevModeErrorObjectNotRecognised"))
    if (HasAttribute (obj, cha)) {
      scr = GetAttribute (obj, cha)
      set (obj, cha, bla)
      set (obj, att, val)
      set (obj, cha, scr)
    }
    else {
      set (obj, att, val)
    }
  </function>

  <function name="setPov" parameters="obj">
    setWithoutChange (game, "pov", obj)
    msgdm (Template("DevModeChangedPov") + game.pov.alias)
  </function>

  <function name="setPovPos" parameters="obj">
    setWithoutChange (game.pov, "parent", obj)
    msgdm (Template("DevModeChangedPovPos") + game.pov.parent.alias)
  </function>

  <function name="setDevMode">
	  if (HasAttribute(game, "devmode_active")) {
      if (game.devmode_active) {
        msgdm (Template("DevModeActive"))
        if (HasAttribute(game, "devmode_attributes") and not DictionaryCount(game.devmode_attributes) = 0) {
          foreach(key, game.devmode_attributes) ParseToQuestCode (key + "=" + ToString(DictionaryItem(game.devmode_attributes, key)))
        }
        if (game.devmode_changepov) setPov (getObjectExt(game.devmode_pov))
        if (game.devmode_changepovpos) setPovPos (getObjectExt(game.devmode_povpos))
        if (game.devmode_setverbs) setVerbs
        if (game.devmode_showdebugtable) JS.initDebugTable (GetFileData("DevMode/tabulator.css"))
        if (game.devmode_setinitscript and HasScript(game, "devmode_initscript")) {
          msgdm (Template("DevModeStartScript"))
          do (game, "devmode_initscript")
        }
      }
	  }
  </function>

  <function name="getTableDataNames" parameters="empty">
    data = NewStringList ()
    list add (data, "{\"name\":\"game\"}")
    foreach (obj, AllObjects()) {
      list add (data, "{\"name\":\"" + obj.name + "\"}")
    }
    datastr = "[" + Join (data, ",") + "]"
    JS.setTableData("names", datastr)
  </function>

  <function name="getTableDataAttr" parameters="name">
    data = NewStringList ()
    obj = GetObject (name)
    foreach (attr, GetAttributeNames (obj, true)) {
      val = ParseToDevCode (GetAttribute (obj, attr))
      list add (data, "{\"attribute\":\"" + attr + "\",\"value\":\"" + Replace(val, "\"", "\\\"") + "\"}")
    }
    datastr = "[" + Join (data, ",") + "]"
    JS.setTableData("attr", datastr)
  </function>

  <function name="setVerbs">
    verbs = game.devmode_verbs
    foreach (object, AllObjects()) {
      if (HasAttribute(object, "displayverbs")) {
        object.displayverbs = ListCombine (object.displayverbs, verbs)
      }
      if (HasAttribute(object, "inventoryverbs")) {
        object.inventoryverbs = ListCombine (object.inventoryverbs, verbs)
      }
    }
    game.enablehyperlinks = true
    msgdm (Template("DevModeSetVerbs"))
  </function>

  <function name="getObjectExt" parameters="name" type="object">
    obj = GetObject(name)
    if (obj = null) {
      foreach (sobj, AllObjects()) {
        if (HasAttribute(sobj, "alias")) {
          if (LCase(sobj.alias) = LCase(name)) return (sobj)
        }
      }
    }
    return (obj)
  </function>

  <!-- Types -->

  <type name="devmode">
    <devmode_active type="boolean">true</devmode_active>
    <devmode_changepov type="boolean">false</devmode_changepov>
    <devmode_changepovpos type="boolean">false</devmode_changepovpos>
    <devmode_setinitscript type="boolean">false</devmode_setinitscript>
    <devmode_setverbs type="boolean">true</devmode_setverbs>
    <devmode_verbs type="simplestringlist">#drop;#take;#to;#open;#close;#on;#off</devmode_verbs>
    <devmode_showinfos type="boolean">true</devmode_showinfos>
    <devmode_showdebugtable type="boolean">true</devmode_showdebugtable>
    <devmode_ownfontcolour type="boolean">true</devmode_ownfontcolour>
    <devmode_fontcolour type="string">Green</devmode_fontcolour>
    <devmode_attributes type="stringdictionary" />
 </type>

  <!-- Interface -->

  <tab>
    <parent>_GameEditor</parent>
    <caption>[EditorGameDevMode]</caption>
    <!-- <onlydisplayif>GetBoolean (game, "feature_devmode")</onlydisplayif> -->

    <control>
      <controltype>dropdowntypes</controltype>
      <caption>[EditorGameDevMode]</caption>
      <types>*=[EditorGameDevModeOff]; devmode=[EditorGameDevModeOn];</types>
      <width>150</width>
    </control>

    <control>
      <controltype>title</controltype>
      <caption>[EditorGameDevMode]</caption>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorGameDevModeInfoRelease]</caption>
      <mustinherit>devmode</mustinherit>
      <bold/>
    </control>

    <control>    
      <controltype>label</controltype>
      <caption>[EditorGameDevModeInfoCommands]</caption>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>title</controltype>
      <caption>[EditorGameDevModeOptions]</caption>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeChangePov]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_changepov</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>[EditorGameDevModePov]</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>devmode_pov</attribute>
      <onlydisplayif>game.devmode_changepov</onlydisplayif>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeChangePovPos]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_changepovpos</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>[EditorGameDevModePlace]</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>devmode_povpos</attribute>
      <onlydisplayif>game.devmode_changepovpos</onlydisplayif>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeSetInitScript]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_setinitscript</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeInitScript]</caption>
      <controltype>script</controltype>
      <attribute>devmode_initscript</attribute>
      <onlydisplayif>game.devmode_setinitscript</onlydisplayif>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeSetVerbs]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_setverbs</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeShowDebugTable]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_showdebugtable</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeShowInfos]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_showinfos</attribute>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <caption>[EditorGameDevModeOwnFontColour]</caption>
      <controltype>checkbox</controltype>
      <attribute>devmode_ownfontcolour</attribute>
      <onlydisplayif>game.devmode_showinfos</onlydisplayif>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <caption>[EditorGameDevModeFontColour]</caption>
      <attribute>devmode_fontcolour</attribute>
      <validvalues type="simplestringlist">[HTMLColorNames]</validvalues>
      <onlydisplayif>game.devmode_showinfos and game.devmode_ownfontcolour</onlydisplayif>
      <mustinherit>devmode</mustinherit>
      <freetext/>
    </control>

    <control>
      <controltype>title</controltype>
      <caption>[EditorGameDevModeAttributes]</caption>
      <mustinherit>devmode</mustinherit>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorGameDevModeDescriptionAttribute]</caption>
      <mustinherit>devmode</mustinherit>
      <advanced/>
    </control>

    <control>
      <controltype>stringdictionary</controltype>
      <keyprompt>[EditorObjectAttributesPleaseenter]</keyprompt>
      <valueprompt>[EditorObjectAttributesPleaseenter2]</valueprompt>
      <attribute>devmode_attributes</attribute>
      <mustinherit>devmode</mustinherit>
      <expand/>            
    </control>

  </tab>

</library>
