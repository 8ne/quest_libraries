<?xml version="1.0"?>
<library>

<!--

  ****************************************************************************************************
  SetObjectCase - Setting the Object Case Using a Dropdown Menu
  by EightOne, 2018
  Version 1.5
  ****************************************************************************************************
  Quest-Version: 5.7
  ****************************************************************************************************
  If you are viewing this on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  ****************************************************************************************************
  Download the SetObjectCase.aslx, integrate it as Library in Quest.
  ****************************************************************************************************
  Under Add Script / Add Scripts you will find a new item named "Set object case". This makes it
  possible, for example, to change the text of a switchable object ("If the object cannot be switched
  on" / object.cannotswitchon = "Text") more efficiently.
  ****************************************************************************************************

  ****************************************************************************************************
  Version 1.5
   - Wrong translation template exchanged.
   - Free input field.
   - Scripts added.
  ****************************************************************************************************

-->

  <template name="EditorScriptsObjectsSetObjectCaseAdd">Set object case (with message)</template>
  <template name="EditorScriptsObjectsSetObjectCaseScriptAdd">Set object case (with script)</template>
  <template name="EditorScriptsObjectsSetObjectCaseObject">In the following case of the object</template>
  <template name="EditorScriptsObjectsSetObjectCaseMsg">Show message</template>
  <template name="EditorScriptsObjectsSetObjectCaseScript">Run sript</template>
  <template name="EditorObjectOptionsCannotswitchon">Leave blank to allow the object to be turned on - give a message if it cannot be turned on (eg requires power or repair)</template>  

<!-- Zur Umstellung auf Deutsch folgende Zeilen einklammern -->
<!--
  <template name="EditorScriptsObjectsSetObjectCaseAdd">Objektfall festlegen (mit Text)</template>
  <template name="EditorScriptsObjectsSetObjectCaseScriptAdd">Objektfall festlegen (mit Skript)</template>
  <template name="EditorScriptsObjectsSetObjectCaseObject">Beim folgenden Fall des Objektes</template>
  <template name="EditorScriptsObjectsSetObjectCaseMsg">Text anzeigen</template>
  <template name="EditorScriptsObjectsSetObjectCaseScript">Skript starten</template>
  <template name="EditorObjectOptionsCannotswitchon">Falls das Objekt nicht eingeschaltet werden kann, weil es z. B. defekt ist (Ohne Eingabe = Standardverhalten)</template>  
-->

  <!-- SetObjectCase -->

  <editor>
    <appliesto>(function)SetObjectCase</appliesto>
    <display>Set #0's #1 attribute to #2</display>
    <category>[EditorScriptsObjectsObjects]</category>
    <add>[EditorScriptsObjectsSetObjectCaseAdd]</add>
    <create>SetObjectCase (,,"")</create>
    <onlydisplayif>GetString(game, "_editorstyle") = null</onlydisplayif>

    <control>
      <controltype>label</controltype>
      <caption>[EditorScriptsObjectsSetObjectCaseObject]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>0</attribute>
      <simple>name</simple>
      <simpleeditor>objects</simpleeditor>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <attribute>1</attribute>
      <validvalues type="simplestringdictionary">"look"=[EditorGameSetup]: [EditorObjectOptionsLookatobject]; "listalias"=[EditorObjectObjectObject]: [EditorObjectObjectAliastodisplay]; "takemsg"=[EditorObjectInventoryInventory]: [EditorObjectInventoryTakemessage]; "dropmsg"=[EditorObjectInventoryInventory]: [EditorObjectInventoryDropmessage]; "openmsg"=[EditorObjectContainerContainer]: [EditorObjectContainerMessagetoprint]; "closemsg"=[EditorObjectContainerContainer]: [EditorObjectContainerMessagetoprint2]; "nokeymessage"=[EditorObjectContainerContainer]: [EditorObjectContainerIftheplayer]; "unlockmessage"=[EditorObjectContainerContainer]: [EditorObjectContainerUnlockmessage]; "lockmessage"=[EditorObjectContainerContainer]: [EditorObjectContainerLockmessage]; "wearmsg"=[EditorObjectWearableWearable]: [EditorObjectWearableWearMessage]; "removemsg"=[EditorObjectWearableWearable]: [EditorObjectWearableRemoveMessage]; "switchonmsg"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsMessagetoprint]; "switchoffmsg"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsMessagetoprint2]; "cannotswitchon"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsCannotswitchon]; "switchedondesc"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsExtraobject]; "switchedoffdesc"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsExtraobject2]; "eatmsg"=[EditorObjectOptionsEdible]: [EditorObjectOptionsMessageEat]; "pov_look"=[EditorObjectOptionsPlayer]: [EditorObjectOptionsLookatobject];</validvalues>
      <freetext/>
    </control>
    
    <control>
      <controltype>label</controltype>
      <caption>[EditorScriptsObjectsSetObjectCaseMsg]</caption>
      <breakbefore/>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>2</attribute>
      <simple>message</simple>
      <expand/>
      <multiline/>
    </control>

  </editor>

  <!-- SetObjectCaseScript -->
  
  <editor>
    <appliesto>(function)SetObjectCaseScript</appliesto>
    <display>Set #0's #1 attribute to #2</display>
    <category>[EditorScriptsObjectsObjects]</category>
    <add>[EditorScriptsObjectsSetObjectCaseScriptAdd]</add>
    <create>SetObjectCaseScript (,) { }</create>
    <onlydisplayif>GetString(game, "_editorstyle") = null</onlydisplayif>

    <control>
      <controltype>label</controltype>
      <caption>[EditorScriptsObjectsSetObjectCaseObject]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>0</attribute>
      <simple>name</simple>
      <simpleeditor>objects</simpleeditor>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <attribute>1</attribute>
      <validvalues type="simplestringdictionary">"ontake"=[EditorObjectInventoryInventory]: [EditorObjectInventoryAftertaking]; "take"=[EditorObjectInventoryInventory]: [EditorObjectInventoryTake]; "ondrop"=[EditorObjectInventoryInventory]: [EditorObjectInventoryAfterdropping]; "drop"=[EditorObjectInventoryInventory]: [EditorObjectInventoryDrop]; "onopen"=[EditorObjectContainerContainer]: [EditorObjectContainerAfteropening]; "onclose"=[EditorObjectContainerContainer]: [EditorObjectContainerAfterclosing]; "addscript"=[EditorObjectContainerContainer]: [EditorObjectContainerAddScript]; "onlock"=[EditorObjectContainerContainer]: [EditorObjectContainerAfterlocking]; "onunlock"=[EditorObjectContainerContainer]: [EditorObjectContainerAfterunlocking]; "onswitchon"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsAfterswitching]; "onswitchoff"=[EditorObjectOptionsSwitchable]: [EditorObjectOptionsAfterswitching2];</validvalues>
      <freetext/>
    </control>
    
    <control>
      <controltype>script</controltype>
      <attribute>script</attribute>
      <caption>[EditorScriptsObjectsSetObjectCaseScript]</caption>
      <breakbefore/>
    </control>

  </editor>
  
  <function name="SetObjectCase" parameters="object,attribute,message">
    set (object, attribute, message)
  </function>
  
  <function name="SetObjectCaseScript" parameters="object,attribute,script">
    set (object, attribute, script)
  </function>

</library>